/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

class XmmsClientInterfacePINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("XmmsClientInterface", EntryPoint="SWIGRegisterExceptionCallbacks_XmmsClientInterface")]
    public static extern void SWIGRegisterExceptionCallbacks_XmmsClientInterface(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("XmmsClientInterface", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_XmmsClientInterface")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_XmmsClientInterface(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_XmmsClientInterface(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_XmmsClientInterface(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(XmmsClientInterfacePINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(XmmsClientInterfacePINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("XmmsClientInterface", EntryPoint="SWIGRegisterStringCallback_XmmsClientInterface")]
    public static extern void SWIGRegisterStringCallback_XmmsClientInterface(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_XmmsClientInterface(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_query_attribute_t_key_set")]
  public static extern void xmmsc_query_attribute_t_key_set(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_query_attribute_t_key_get")]
  public static extern string xmmsc_query_attribute_t_key_get(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_query_attribute_t_value_set")]
  public static extern void xmmsc_query_attribute_t_value_set(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_query_attribute_t_value_get")]
  public static extern string xmmsc_query_attribute_t_value_get(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_new_xmmsc_query_attribute_t")]
  public static extern IntPtr new_xmmsc_query_attribute_t();

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_delete_xmmsc_query_attribute_t")]
  public static extern void delete_xmmsc_query_attribute_t(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_init")]
  public static extern IntPtr xmmsc_init(string jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_connect")]
  public static extern int xmmsc_connect(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_unref")]
  public static extern void xmmsc_unref(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_lock_set")]
  public static extern void xmmsc_lock_set(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_disconnect_callback_set")]
  public static extern void xmmsc_disconnect_callback_set(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_io_need_out_callback_set")]
  public static extern void xmmsc_io_need_out_callback_set(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_io_disconnect")]
  public static extern void xmmsc_io_disconnect(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_io_want_out")]
  public static extern int xmmsc_io_want_out(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_io_out_handle")]
  public static extern int xmmsc_io_out_handle(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_io_in_handle")]
  public static extern int xmmsc_io_in_handle(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_io_fd_get")]
  public static extern int xmmsc_io_fd_get(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_get_last_error")]
  public static extern string xmmsc_get_last_error(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_entry_format")]
  public static extern int xmmsc_entry_format(string jarg1, int jarg2, string jarg3, HandleRef jarg4);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_quit")]
  public static extern IntPtr xmmsc_quit(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_plugin_list")]
  public static extern IntPtr xmmsc_plugin_list(HandleRef jarg1, int jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_main_stats")]
  public static extern IntPtr xmmsc_main_stats(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_broadcast_quit")]
  public static extern IntPtr xmmsc_broadcast_quit(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_querygen_and")]
  public static extern string xmmsc_querygen_and(HandleRef jarg1, uint jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_sqlite_prepare_string")]
  public static extern string xmmsc_sqlite_prepare_string(string jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_shuffle")]
  public static extern IntPtr xmmsc_playlist_shuffle(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_add")]
  public static extern IntPtr xmmsc_playlist_add(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_add_args")]
  public static extern IntPtr xmmsc_playlist_add_args(HandleRef jarg1, string jarg2, int jarg3, HandleRef jarg4);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_add_id")]
  public static extern IntPtr xmmsc_playlist_add_id(HandleRef jarg1, HandleRef jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_add_encoded")]
  public static extern IntPtr xmmsc_playlist_add_encoded(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_remove")]
  public static extern IntPtr xmmsc_playlist_remove(HandleRef jarg1, HandleRef jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_clear")]
  public static extern IntPtr xmmsc_playlist_clear(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_list")]
  public static extern IntPtr xmmsc_playlist_list(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_sort")]
  public static extern IntPtr xmmsc_playlist_sort(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_set_next")]
  public static extern IntPtr xmmsc_playlist_set_next(HandleRef jarg1, HandleRef jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_set_next_rel")]
  public static extern IntPtr xmmsc_playlist_set_next_rel(HandleRef jarg1, HandleRef jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_move")]
  public static extern IntPtr xmmsc_playlist_move(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_current_pos")]
  public static extern IntPtr xmmsc_playlist_current_pos(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_insert")]
  public static extern IntPtr xmmsc_playlist_insert(HandleRef jarg1, int jarg2, string jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_insert_args")]
  public static extern IntPtr xmmsc_playlist_insert_args(HandleRef jarg1, int jarg2, string jarg3, int jarg4, HandleRef jarg5);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_insert_encoded")]
  public static extern IntPtr xmmsc_playlist_insert_encoded(HandleRef jarg1, int jarg2, string jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_insert_id")]
  public static extern IntPtr xmmsc_playlist_insert_id(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_radd")]
  public static extern IntPtr xmmsc_playlist_radd(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playlist_radd_encoded")]
  public static extern IntPtr xmmsc_playlist_radd_encoded(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_broadcast_playlist_changed")]
  public static extern IntPtr xmmsc_broadcast_playlist_changed(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_broadcast_playlist_current_pos")]
  public static extern IntPtr xmmsc_broadcast_playlist_current_pos(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playback_stop")]
  public static extern IntPtr xmmsc_playback_stop(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playback_tickle")]
  public static extern IntPtr xmmsc_playback_tickle(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playback_start")]
  public static extern IntPtr xmmsc_playback_start(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playback_pause")]
  public static extern IntPtr xmmsc_playback_pause(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playback_current_id")]
  public static extern IntPtr xmmsc_playback_current_id(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playback_seek_ms")]
  public static extern IntPtr xmmsc_playback_seek_ms(HandleRef jarg1, HandleRef jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playback_seek_ms_rel")]
  public static extern IntPtr xmmsc_playback_seek_ms_rel(HandleRef jarg1, int jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playback_seek_samples")]
  public static extern IntPtr xmmsc_playback_seek_samples(HandleRef jarg1, HandleRef jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playback_seek_samples_rel")]
  public static extern IntPtr xmmsc_playback_seek_samples_rel(HandleRef jarg1, int jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playback_playtime")]
  public static extern IntPtr xmmsc_playback_playtime(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playback_status")]
  public static extern IntPtr xmmsc_playback_status(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playback_volume_set")]
  public static extern IntPtr xmmsc_playback_volume_set(HandleRef jarg1, string jarg2, HandleRef jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_playback_volume_get")]
  public static extern IntPtr xmmsc_playback_volume_get(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_broadcast_playback_volume_changed")]
  public static extern IntPtr xmmsc_broadcast_playback_volume_changed(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_broadcast_playback_status")]
  public static extern IntPtr xmmsc_broadcast_playback_status(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_broadcast_playback_current_id")]
  public static extern IntPtr xmmsc_broadcast_playback_current_id(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_signal_playback_playtime")]
  public static extern IntPtr xmmsc_signal_playback_playtime(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_configval_set")]
  public static extern IntPtr xmmsc_configval_set(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_configval_list")]
  public static extern IntPtr xmmsc_configval_list(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_configval_get")]
  public static extern IntPtr xmmsc_configval_get(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_configval_register")]
  public static extern IntPtr xmmsc_configval_register(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_broadcast_configval_changed")]
  public static extern IntPtr xmmsc_broadcast_configval_changed(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_broadcast_mediainfo_reader_status")]
  public static extern IntPtr xmmsc_broadcast_mediainfo_reader_status(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_signal_visualisation_data")]
  public static extern IntPtr xmmsc_signal_visualisation_data(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_signal_mediainfo_reader_unindexed")]
  public static extern IntPtr xmmsc_signal_mediainfo_reader_unindexed(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_userconfdir_get")]
  public static extern string xmmsc_userconfdir_get(string jarg1, int jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_select")]
  public static extern IntPtr xmmsc_medialib_select(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_playlist_save_current")]
  public static extern IntPtr xmmsc_medialib_playlist_save_current(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_playlist_load")]
  public static extern IntPtr xmmsc_medialib_playlist_load(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_add_entry")]
  public static extern IntPtr xmmsc_medialib_add_entry(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_add_entry_args")]
  public static extern IntPtr xmmsc_medialib_add_entry_args(HandleRef jarg1, string jarg2, int jarg3, HandleRef jarg4);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_add_entry_encoded")]
  public static extern IntPtr xmmsc_medialib_add_entry_encoded(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_get_info")]
  public static extern IntPtr xmmsc_medialib_get_info(HandleRef jarg1, HandleRef jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_add_to_playlist")]
  public static extern IntPtr xmmsc_medialib_add_to_playlist(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_playlists_list")]
  public static extern IntPtr xmmsc_medialib_playlists_list(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_playlist_list")]
  public static extern IntPtr xmmsc_medialib_playlist_list(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_playlist_import")]
  public static extern IntPtr xmmsc_medialib_playlist_import(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_playlist_export")]
  public static extern IntPtr xmmsc_medialib_playlist_export(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_playlist_remove")]
  public static extern IntPtr xmmsc_medialib_playlist_remove(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_path_import")]
  public static extern IntPtr xmmsc_medialib_path_import(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_path_import_encoded")]
  public static extern IntPtr xmmsc_medialib_path_import_encoded(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_rehash")]
  public static extern IntPtr xmmsc_medialib_rehash(HandleRef jarg1, HandleRef jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_get_id")]
  public static extern IntPtr xmmsc_medialib_get_id(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_remove_entry")]
  public static extern IntPtr xmmsc_medialib_remove_entry(HandleRef jarg1, HandleRef jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_entry_property_set_int")]
  public static extern IntPtr xmmsc_medialib_entry_property_set_int(HandleRef jarg1, HandleRef jarg2, string jarg3, HandleRef jarg4);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_entry_property_set_int_with_source")]
  public static extern IntPtr xmmsc_medialib_entry_property_set_int_with_source(HandleRef jarg1, HandleRef jarg2, string jarg3, string jarg4, HandleRef jarg5);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_entry_property_set_str")]
  public static extern IntPtr xmmsc_medialib_entry_property_set_str(HandleRef jarg1, HandleRef jarg2, string jarg3, string jarg4);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_entry_property_set_str_with_source")]
  public static extern IntPtr xmmsc_medialib_entry_property_set_str_with_source(HandleRef jarg1, HandleRef jarg2, string jarg3, string jarg4, string jarg5);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_entry_property_remove")]
  public static extern IntPtr xmmsc_medialib_entry_property_remove(HandleRef jarg1, HandleRef jarg2, string jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_medialib_entry_property_remove_with_source")]
  public static extern IntPtr xmmsc_medialib_entry_property_remove_with_source(HandleRef jarg1, HandleRef jarg2, string jarg3, string jarg4);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_xform_media_browse")]
  public static extern IntPtr xmmsc_xform_media_browse(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_xform_media_browse_encoded")]
  public static extern IntPtr xmmsc_xform_media_browse_encoded(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_bindata_add")]
  public static extern IntPtr xmmsc_bindata_add(HandleRef jarg1, HandleRef jarg2, uint jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_bindata_retrieve")]
  public static extern IntPtr xmmsc_bindata_retrieve(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_bindata_remove")]
  public static extern IntPtr xmmsc_bindata_remove(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_broadcast_medialib_entry_changed")]
  public static extern IntPtr xmmsc_broadcast_medialib_entry_changed(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_broadcast_medialib_entry_added")]
  public static extern IntPtr xmmsc_broadcast_medialib_entry_added(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_broadcast_medialib_playlist_loaded")]
  public static extern IntPtr xmmsc_broadcast_medialib_playlist_loaded(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_restart")]
  public static extern IntPtr xmmsc_result_restart(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_run")]
  public static extern void xmmsc_result_run(HandleRef jarg1, HandleRef jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_get_class")]
  public static extern int xmmsc_result_get_class(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_disconnect")]
  public static extern void xmmsc_result_disconnect(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_ref")]
  public static extern void xmmsc_result_ref(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_unref")]
  public static extern void xmmsc_result_unref(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_notifier_set")]
  public static extern void xmmsc_result_notifier_set(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_wait")]
  public static extern void xmmsc_result_wait(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_iserror")]
  public static extern int xmmsc_result_iserror(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_get_error")]
  public static extern string xmmsc_result_get_error(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_get_int")]
  public static extern int xmmsc_result_get_int(HandleRef jarg1, HandleRef jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_get_uint")]
  public static extern int xmmsc_result_get_uint(HandleRef jarg1, HandleRef jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_get_string")]
  public static extern int xmmsc_result_get_string(HandleRef jarg1, HandleRef jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_get_bin")]
  public static extern int xmmsc_result_get_bin(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_get_dict_entry_type")]
  public static extern int xmmsc_result_get_dict_entry_type(HandleRef jarg1, string jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_get_dict_entry_str")]
  public static extern int xmmsc_result_get_dict_entry_str(HandleRef jarg1, string jarg2, HandleRef jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_get_dict_entry_int32")]
  public static extern int xmmsc_result_get_dict_entry_int32(HandleRef jarg1, string jarg2, HandleRef jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_get_dict_entry_uint32")]
  public static extern int xmmsc_result_get_dict_entry_uint32(HandleRef jarg1, string jarg2, HandleRef jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_dict_foreach")]
  public static extern int xmmsc_result_dict_foreach(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_propdict_foreach")]
  public static extern int xmmsc_result_propdict_foreach(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_source_preference_set")]
  public static extern void xmmsc_result_source_preference_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_is_list")]
  public static extern int xmmsc_result_is_list(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_list_next")]
  public static extern int xmmsc_result_list_next(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_list_first")]
  public static extern int xmmsc_result_list_first(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_list_valid")]
  public static extern int xmmsc_result_list_valid(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_get_type")]
  public static extern int xmmsc_result_get_type(HandleRef jarg1);

  [DllImport("XmmsClientInterface", EntryPoint="CSharp_xmmsc_result_decode_url")]
  public static extern string xmmsc_result_decode_url(HandleRef jarg1, string jarg2);
}
